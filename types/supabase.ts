/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/chat": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat.id"];
          created_at?: parameters["rowFilter.chat.created_at"];
          message?: parameters["rowFilter.chat.message"];
          sender_id?: parameters["rowFilter.chat.sender_id"];
          game_slug?: parameters["rowFilter.chat.game_slug"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["chat"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chat */
          chat?: definitions["chat"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat.id"];
          created_at?: parameters["rowFilter.chat.created_at"];
          message?: parameters["rowFilter.chat.message"];
          sender_id?: parameters["rowFilter.chat.sender_id"];
          game_slug?: parameters["rowFilter.chat.game_slug"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat.id"];
          created_at?: parameters["rowFilter.chat.created_at"];
          message?: parameters["rowFilter.chat.message"];
          sender_id?: parameters["rowFilter.chat.sender_id"];
          game_slug?: parameters["rowFilter.chat.game_slug"];
        };
        body: {
          /** chat */
          chat?: definitions["chat"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/game": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game.id"];
          slug?: parameters["rowFilter.game.slug"];
          created_at?: parameters["rowFilter.game.created_at"];
          player1_id?: parameters["rowFilter.game.player1_id"];
          player2_id?: parameters["rowFilter.game.player2_id"];
          winner?: parameters["rowFilter.game.winner"];
          fen?: parameters["rowFilter.game.fen"];
          turn?: parameters["rowFilter.game.turn"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["game"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** game */
          game?: definitions["game"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game.id"];
          slug?: parameters["rowFilter.game.slug"];
          created_at?: parameters["rowFilter.game.created_at"];
          player1_id?: parameters["rowFilter.game.player1_id"];
          player2_id?: parameters["rowFilter.game.player2_id"];
          winner?: parameters["rowFilter.game.winner"];
          fen?: parameters["rowFilter.game.fen"];
          turn?: parameters["rowFilter.game.turn"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.game.id"];
          slug?: parameters["rowFilter.game.slug"];
          created_at?: parameters["rowFilter.game.created_at"];
          player1_id?: parameters["rowFilter.game.player1_id"];
          player2_id?: parameters["rowFilter.game.player2_id"];
          winner?: parameters["rowFilter.game.winner"];
          fen?: parameters["rowFilter.game.fen"];
          turn?: parameters["rowFilter.game.turn"];
        };
        body: {
          /** game */
          game?: definitions["game"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          name?: parameters["rowFilter.profiles.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          name?: parameters["rowFilter.profiles.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          username?: parameters["rowFilter.profiles.username"];
          avatar_url?: parameters["rowFilter.profiles.avatar_url"];
          website?: parameters["rowFilter.profiles.website"];
          name?: parameters["rowFilter.profiles.name"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  chat: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    message: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    sender_id: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `game.slug`.<fk table='game' column='slug'/>
     */
    game_slug: string;
  };
  game: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    slug: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    player1_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    player2_id?: string;
    /** Format: text */
    winner?: string;
    /** Format: text */
    fen?: string;
    /** Format: text */
    turn?: string;
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    website?: string;
    /** Format: text */
    name?: string;
  };
}

export interface parameters {
  /** @description Preference */
  preferParams: "params=single-object";
  /** @description Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** @description Preference */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description chat */
  "body.chat": definitions["chat"];
  /** Format: bigint */
  "rowFilter.chat.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.chat.created_at": string;
  /** Format: text */
  "rowFilter.chat.message": string;
  /** Format: uuid */
  "rowFilter.chat.sender_id": string;
  /** Format: text */
  "rowFilter.chat.game_slug": string;
  /** @description game */
  "body.game": definitions["game"];
  /** Format: bigint */
  "rowFilter.game.id": string;
  /** Format: text */
  "rowFilter.game.slug": string;
  /** Format: timestamp with time zone */
  "rowFilter.game.created_at": string;
  /** Format: uuid */
  "rowFilter.game.player1_id": string;
  /** Format: uuid */
  "rowFilter.game.player2_id": string;
  /** Format: text */
  "rowFilter.game.winner": string;
  /** Format: text */
  "rowFilter.game.fen": string;
  /** Format: text */
  "rowFilter.game.turn": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: text */
  "rowFilter.profiles.username": string;
  /** Format: text */
  "rowFilter.profiles.avatar_url": string;
  /** Format: text */
  "rowFilter.profiles.website": string;
  /** Format: text */
  "rowFilter.profiles.name": string;
}

export interface operations {}

export interface external {}
